# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
from telegram.ext import CommandHandler, MessageHandler, Filters, Job, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import (TelegramError, Unauthorized, BadRequest,
                            TimedOut, ChatMigrated, NetworkError)
#updater = Updater(token='757939309:AAE3QMqbT8oeyZ44es-l6eSzxpy1toCf_Bk') # –¢–æ–∫–µ–Ω API –∫ Telegram        # –°–∞–º –±–æ—Ç

#dispatcher = updater.dispatcher

import threading
import multiprocessing
import work_materials.globals as globals
import traceback

from work_materials.filters.class_filters import *
from work_materials.filters.fraction_filters import *
from work_materials.filters.other_initiate_filters import *
from work_materials.filters.service_filters import *
from work_materials.filters.location_filters import *
from work_materials.filters.info_filters import *
from work_materials.filters.equipment_filters import *
from work_materials.filters.merchant_filters import *
from work_materials.filters.auction_filters import *
from work_materials.filters.battle_filters import *

from bin.service_commands import *
from bin.starting_player import *
from bin.save_load_user_data import *
from bin.lvl_up_player import *
from bin.item_service import *
from bin.auction_checker import *
from bin.matchmaking import *
from bin.status_monitor import *

import work_materials.globals
from libs.resorses import *
from libs.equipment import *
from libs.myJob import MyJob
from libs.lot import *
from bin.travel_functions import *

from libs.player_matchmaking import *


sys.path.append('../')

console = logging.StreamHandler()
console.setLevel(logging.INFO)

log_file = logging.FileHandler(filename='error.log', mode='a')
log_file.setLevel(logging.ERROR)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level = logging.INFO, handlers=[log_file, console])



logging.getLogger('').addHandler(console)

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
multiprocessing.log_to_stderr()
logger = multiprocessing.get_logger()
logger.setLevel(logging.INFO)
processing = 1

work_materials.globals.processing = 1


def add_resource(bot, update, args):
    item = Resourse(int(args[0]))
    player = get_player(update.message.from_user.id)
    print("code = ", player.add_item(player.res_backpack, item, int(args[1])))


def remove_resource(bot, update, args):
    item = Resourse(int(args[0]))
    player = get_player(update.message.from_user.id)
    print("code = ", player.remove_item(player.res_backpack, item, int(args[1])))


def equip(bot, update):
    id = update.message.text.partition('_')[2]
    eqipment = Equipment(0, id, 0, 0, 0, 0, 0, 0, 0)
    if eqipment.update_from_database() is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    player = get_player(update.message.from_user.id)
    return_code = player.equip(eqipment)
    if return_code == 1:
        bot.send_message(chat_id=update.message.from_user.id, text="–≠—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
        return
    if return_code == -1:
        bot.send_message(chat_id=update.message.from_user.id, text="–û—à–∏–±–∫–∞")
        return
    bot.send_message(chat_id = update.message.from_user.id, text = "–£—Å–ø–µ—à–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ")


def unequip(bot, update):
    id = update.message.from_user.id
    player = get_player(id)
    equipment_id = player.on_character.get(update.message.text.partition('_')[2])
    if equipment_id is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–¥–µ—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
        return
    equipment = get_equipment(equipment_id)
    player.unequip(equipment)
    bot.send_message(chat_id = update.message.from_user.id, text = "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç")


def merchant(bot, update, user_data):
    player = get_player(update.message.from_user.id)
    update_status('Merchant', player, user_data)
    user_data.update({'saved_status' : 'In Location'})
    show_general_buttons(bot, update, user_data)


def merchant_buy(bot, update, user_data):
    text = update.message.text
    player = get_player(update.message.from_user.id)
    if text == '–ì–æ–ª–æ–≤–∞':
        type = "eh"
    elif text == '–¢–µ–ª–æ':
        type = "eb"
    elif text == '–ü–µ—Ä—á–∞—Ç–∫–∏':
        type = "es"
    elif text == '–ù–æ–≥–∏':
        type = "ez"
    elif text == '–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è':
        type = "em"
    elif text == '–ò–º–ø–ª–∞–Ω—Ç—ã':
        type = "ei"
    else:
        type = "e"
    location_id = player.location
    location_type = 0 if (location_id >= 14 and location_id <= 16) else 1
    #if location_id >= 14 and location_id <= 16:
    #    location_type = 0
    #else:
    #    location_type = 1
    request = "SELECT item_id, equipment_id, item_name, item_price FROM merchant_items WHERE location_type = '{0}' and item_type = '{1}'".format(location_type, type)
    cursor.execute(request)
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–ü—Ä–æ–π–¥—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤—Ü–æ–º —É–≥–æ–ª, –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏"
                                                                   " –ª–∏—à—å –ø—ã–ª—å –Ω–∞ –¥–∞–≤–Ω–æ –ø—É—Å—Ç—É—é—â–∏—Ö –ø–æ–ª–∫–∞—Ö. –ß—Ç–æ –∂–µ, –º–æ–∂–µ—Ç, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑?")
        return
    response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
    while row:
        response += "\n<b>{0}</b>\n<b>üí∞{1}</b>\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /item_{2}\n–ö—É–ø–∏—Ç—å: /buy_{2}\n".format(row[2], row[3], row[0])
        row = cursor.fetchone()
    bot.send_message(chat_id = update.message.from_user.id, text = response, parse_mode="HTML")

def buy(bot, update, user_data):
    player = get_player(update.message.from_user.id)
    request = "SELECT equipment_id, item_price FROM merchant_items WHERE item_id = '{0}'".format(update.message.text.partition('_')[2])
    cursor.execute(request)
    row = cursor.fetchone()
    equipment = get_equipment(row[0])
    gold = player.resources.get("gold")
    if row is None or equipment is None or gold < row[1]:
        bot.send_message(chat_id=update.message.from_user.id, text="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    player.resources.update({"gold": gold - row[1]})
    player.add_item(player.eq_backpack, equipment, 1)
    players_need_update.put(player)
    bot.send_message(chat_id=update.message.from_user.id, text="–í—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –≤–∏–¥–æ–º –Ω–æ–≤–æ–π —à–º–æ—Ç–∫–∏")


def auction(bot, update):
    response = "–í—ã –≤–æ—à–ª–∏ –≤ –∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞\n\n"
    response += "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤: /lots [name]\n"
    response += "–í—ã—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: /create_lot_{id –ø—Ä–µ–¥–º–µ—Ç–∞}_{–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞}_{—Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞}_{–≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö}\n"
    response += "\n–í–∞—à–∏ –ª–æ—Ç—ã: /my_lots\n"
    response += "–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏: /my_bids\n"
    bot.send_message(chat_id=update.message.from_user.id, text=response)



def create_lot(bot, update):
    print(time.time())
    args = update.message.text.split("_")
    if len(args) < 6:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    equipment_id = int(args[2])
    price = int(args[3])
    buyout_price = int(args[4])
    duration = float(args[5])

    if price <= 0 or buyout_price <= 0 or duration <= 0:
        bot.send_message(chat_id=update.message.from_user.id, text="–¶–µ–Ω–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã!")
        return

    equipment = get_equipment(equipment_id)
    if equipment is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    player = get_player(update.message.from_user.id)
    if player is None:
        return
    if player.remove_item(player.eq_backpack, equipment, 1) != 0:
        bot.send_message(chat_id=update.message.from_user.id, text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
        return
    lot = Lot(equipment, player, price, buyout_price, duration)
    new_id = lot.create()
    print(time.time())
    bot.send_message(chat_id=update.message.from_user.id, text="–õ–æ—Ç ‚Ññ <b>{0}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n–û—Ç–º–µ–Ω–∏—Ç—å –ª–æ—Ç: /cancel_lot_{0}".format(new_id), parse_mode='HTML')
    print(time.time())



def cancel_lot(bot, update):
    request = "select item_type, item_id, player_bid_id, price from lots where lot_id = '{0}' and player_created_id = '{1}'".format(update.message.text.split("_")[2], update.message.from_user.id)
    cursor.execute(request)
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    item_type = row[0]
    item_id = row[1]
    player_bid_id = row[2]
    price = row[3]
    player = get_player(update.message.from_user.id)
    item_response = get_item_and_list(item_type, item_id, player)
    list = item_response[0]
    item = item_response[1]
    player.add_item(list, item, 1)
    request = "delete from lots where lot_id = '{0}'".format(update.message.text.split("_")[2])
    cursor.execute(request)
    conn.commit()
    if player_bid_id is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω")
        return
    player = get_player(player_bid_id)
    gold = player.resources.get("gold") + price
    player.resources.update(gold = gold)
    bot.send_message(chat_id=player_bid_id, text="–õ–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É, –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ó–æ–ª–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
    bot.send_message(chat_id=update.message.from_user.id, text="–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω")


def bet(bot, update):
    args = update.message.text.split("_")
    request = "select price, player_bid_id from lots where lot_id = '{0}'".format(args[1])
    cursor.execute(request)
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    price = int(row[0])
    new_price = int(args[2])
    if new_price <= price:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π")
        return
    player_bid_id = row[1]
    if player_bid_id == update.message.from_user.id:
        bot.send_message(chat_id=update.message.from_user.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Å—Ç–∞–≤–∫—É")
        return
    player = get_player(update.message.from_user.id)
    gold = player.resources.get("gold")
    if new_price > gold:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥")
        return
    gold -= new_price
    player.resources.update(gold=gold)
    request = "update lots set price = '{0}', player_bid_id = '{1}' where lot_id = '{2}'".format(new_price, update.message.from_user.id, args[1])   #TODO —Å–¥–µ–ª–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ—á—Ç–∏ –∫–æ–Ω—á–∏–ª–æ—Å—å
    cursor.execute(request)
    conn.commit()
    bot.send_message(chat_id=update.message.from_user.id, text="–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–∞")
    if player_bid_id is not None:
        player = get_player(player_bid_id)
        gold = player.resources.get("gold") + price
        player.resources.update(gold=gold)
        bot.send_message(chat_id=player_bid_id, text="–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞. –ó–æ–ª–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")


def lots(bot, update):
    item_name = "" + update.message.text.partition(" ")[2]
    #print(item_name)
    request = "select lot_id, item_name, time_end, price, buyout_price from lots where item_name ~* '{0}' order by time_end".format(item_name)
    #print(request)
    cursor.execute(request)
    row = cursor.fetchone()
    response = "–°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤:\n\n"
    while row:
        time_end = row[2] - datetime.datetime.now(tz = pytz.timezone('UTC'))
        new_response = "<b>{0}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - üí∞<b>{1}</b>\n–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{2}</b>\n–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: /bet_{3}_[–ù–æ–≤–∞—è —Ü–µ–Ω–∞]\n\n".format(row[1], row[3], time_end, row[0])

        if len(response + new_response) >= 4096:
            bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')
            response = ""
        response += new_response

        row = cursor.fetchone()
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')


def my_lots(bot, update):
    item_name = "" + update.message.text.partition(" ")[2]
    #print(item_name)
    request = "select lot_id, item_name, time_end, price, buyout_price from lots where item_name ~* '{0}' and player_created_id = '{1}' order by time_end".format(
        item_name, update.message.from_user.id)
    #print(request)
    cursor.execute(request)
    row = cursor.fetchone()
    response = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–æ—Ç–æ–≤:\n\n"
    while row:
        time_end = row[2] - datetime.datetime.now(tz=pytz.timezone('UTC'))
        new_response = "<b>{0}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - üí∞<b>{1}</b>\n–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{2}</b>\n\n\n".format(
            row[1], row[3], time_end)
        if len(response + new_response) >= 4096:
            bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')
            response = ""
        response += new_response
        row = cursor.fetchone()
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')


def my_bids(bot, update):
    item_name = "" + update.message.text.partition(" ")[2]
    #print(item_name)
    request = "select lot_id, item_name, time_end, price, buyout_price from lots where item_name ~* '{0}' and player_bid_id = '{1}' order by time_end".format(
        item_name, update.message.from_user.id)
    #print(request)
    cursor.execute(request)
    row = cursor.fetchone()
    response = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫:\n\n"
    while row:
        time_end = row[2] - datetime.datetime.now(tz=pytz.timezone('UTC'))
        new_response = "<b>{0}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - üí∞<b>{1}</b>\n–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{2}</b>\n\n\n".format(
            row[1], row[3], time_end)
        if len(response + new_response) >= 4096:
            bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')
            response = ""
        response += new_response
        row = cursor.fetchone()
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')


def matchmaking_start(bot, update, user_data):
    if user_data.get("status") != "In Location":
        bot.send_message(chat_id=update.message.chat_id, text="–°–µ–π—á–∞—Å –≤—ã –∑–∞–Ω—è—Ç—ã —á–µ–º-—Ç–æ –µ—â—ë")
        return

    user_data.update(matchmaking = [0, 0, 0])
    button_list = [
        InlineKeyboardButton("1 x 1", callback_data="mm 1x1"),
        InlineKeyboardButton("3 x 3", callback_data="mm 3x3"),
        InlineKeyboardButton("5 x 5", callback_data="mm 5x5")
    ]
    footer_buttons = [
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="mm start")
    ]
    reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=3, footer_buttons=footer_buttons))
    bot.send_message(chat_id=update.message.chat_id, text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ç–≤—ã:", reply_markup=reply_markup)

def callback(bot, update, user_data):
    mes = update.callback_query.message
    if update.callback_query.data.find("mm") == 0:
        matchmaking = user_data.get("matchmaking")
        if update.callback_query.data == "mm start" or update.callback_query.data == "mm cancel":
            player = get_player(update.callback_query.from_user.id)

            if update.callback_query.data == "mm cancel":
                if user_data.get("status") != "Matchmaking" and user_data.get("status") != "Battle": #  TODO –ö–∞–∫ –±–∏—Ç–≤—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å "Battle", —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    bot.send_message(chat_id=update.callback_query.from_user.id, text="–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ –±–∏—Ç–≤—ã")
                    return
                player_matchmaking = Player_matchmaking(player, 0, matchmaking)
                matchmaking_players.put(player_matchmaking)
                bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                        text="–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω", show_alert=False)
                try:
                    bot.deleteMessage(chat_id=update.callback_query.from_user.id, message_id=mes.message_id)
                except Unauthorized:
                    pass
                new_status = user_data.get('saved_battle_status')
                update_status(new_status, player, user_data)
                matchmaking_start(bot, update.callback_query, user_data)
                return



            #   –ù–∞—á–∞–ª–æ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
            flag = 0
            for i in matchmaking:
                if i == 1:
                    flag = 1
                    break
            if flag == 0:
                bot.send_message(chat_id=update.callback_query.from_user.id, text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º")
                return

            player_matchmaking = Player_matchmaking(player, 1, matchmaking)
            #bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text = "–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", show_alert = False)
            button_list = [
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤", callback_data="mm cancel")
            ]
            reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
            bot.deleteMessage(chat_id=update.callback_query.from_user.id, message_id=mes.message_id)
            bot.send_message(chat_id=update.callback_query.from_user.id, text="–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!", reply_markup=reply_markup)
            status = user_data.get("status")
            user_data.update(saved_battle_status = status) if status != 'Matchmaking' else 0
            update_status('Matchmaking', player, user_data)
            matchmaking_players.put(player_matchmaking)
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞ –±–∏—Ç–≤
        #print(matchmaking)
        callback_data = update.callback_query.data
        if callback_data == "mm 1x1":
            matchmaking[0] = (matchmaking[0] + 1) % 2
        elif callback_data == "mm 3x3":
            matchmaking[1] = (matchmaking[1] + 1) % 2
        elif callback_data == "mm 5x5":
            matchmaking[2] = (matchmaking[2] + 1) % 2
        first_button_text = "{0}1 x 1".format('‚úÖ' if matchmaking[0] else "")
        second_button_text = "{0}3 x 3".format('‚úÖ' if matchmaking[1] else "")
        third_button_text = "{0}5 x 5".format('‚úÖ' if matchmaking[2] else "")
        button_list = [
            InlineKeyboardButton(first_button_text, callback_data="mm 1x1"),
            InlineKeyboardButton(second_button_text, callback_data="mm 3x3"),
            InlineKeyboardButton(third_button_text, callback_data="mm 5x5")
        ]
        footer_buttons = [
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="mm start")
        ]
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=3, footer_buttons=footer_buttons))
        try:
            bot.editMessageReplyMarkup(chat_id=mes.chat_id, message_id=mes.message_id, reply_markup=reply_markup)
            bot.answerCallbackQuery(callback_query_id=update.callback_query.id)
        except TelegramError:
            logging.error(traceback.format_exc)
            pass


#–§–∏–ª—å—Ç—Ä –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
dispatcher.add_handler(CommandHandler("start", start, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_fractions, fraction_select, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_race, race_select, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_classes, class_select, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_sex_select, sex_select, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_nickname_select, nickname_select, pass_user_data=True))

#–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
dispatcher.add_handler(CommandHandler("setstatus", set_status, pass_user_data=True, filters = filter_is_admin, pass_args=True))
dispatcher.add_handler(CommandHandler("sql", sql, pass_user_data=True, filters = filter_is_admin))
dispatcher.add_handler(CommandHandler("update_player", update_player, pass_args=True, filters=filter_is_admin))
dispatcher.add_handler(CommandHandler("delete_self", delete_self, pass_user_data=True))#, filters = filter_is_admin))
dispatcher.add_handler(CommandHandler("kill_myself", delete_self, pass_user_data=True, filters = filter_is_admin))
dispatcher.add_handler(CommandHandler("showdata", show_data, pass_user_data=True, filters=filter_is_admin))
dispatcher.add_handler(CommandHandler("fasttravel", fast_travel, pass_user_data=True, filters=filter_is_admin & fast_travel_filter))
dispatcher.add_handler(CommandHandler("return", return_to_location_admin, pass_user_data=True, filters=filter_is_admin))
dispatcher.add_handler(CommandHandler("buttons", show_general_buttons, pass_user_data=True, filters=filter_is_admin))

#–§–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
dispatcher.add_handler(MessageHandler(Filters.text and filter_info, print_player, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_in_info and filter_print_backpack, print_backpacks, pass_user_data=True))
dispatcher.add_handler(CommandHandler("me", print_player, pass_user_data=True))
dispatcher.add_handler(CommandHandler("equipment", show_equipment))
dispatcher.add_handler(MessageHandler(Filters.text and filter_implants, show_equipment))
dispatcher.add_handler(MessageHandler(Filters.text and filter_info_return, return_from_info, pass_user_data=True))

#–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
dispatcher.add_handler(CommandHandler("lvl_up", lvl_up, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_lvl_up_skill, lvl_up_skill, pass_user_data=True))
dispatcher.add_handler(CommandHandler("lvl_up_points", choose_points, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_lvl_up_points, lvl_up_points, pass_user_data=True))

#–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
dispatcher.add_handler(MessageHandler(Filters.text and location_filter and travel_filter, travel, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and choosing_way_filter, choose_way, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_return_to_location, return_to_location, pass_user_data=True))

#–§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
dispatcher.add_handler(MessageHandler(Filters.text and filter_merchant, merchant, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_merchant_buy, merchant_buy, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_return_from_merchant, return_from_info, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_buy_equipment, buy, pass_user_data=True))


#–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
dispatcher.add_handler(MessageHandler(Filters.text and filter_auction, auction, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_create_lot, create_lot, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_cancel_lot, cancel_lot, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_bet, bet, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_lots, lots, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_my_lots, my_lots, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_my_bids, my_bids, pass_user_data=False))



dispatcher.add_handler(CommandHandler("matchmaking_start", matchmaking_start, pass_user_data=True))
dispatcher.add_handler(MessageHandler(Filters.text and filter_start_battle, matchmaking_start, pass_user_data=True))


dispatcher.add_handler(CallbackQueryHandler(callback, pass_update_queue=False, pass_user_data=True))







#–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
dispatcher.add_handler(CommandHandler("add_resource", add_resource, pass_user_data=False, pass_args=True))
dispatcher.add_handler(CommandHandler("remove_resource", remove_resource, pass_user_data=False, pass_args=True))

dispatcher.add_handler(MessageHandler(Filters.text and filter_equip, equip, pass_user_data=False))
dispatcher.add_handler(MessageHandler(Filters.text and filter_unequip, unequip, pass_user_data=False))


#-------------------

def text_message(bot, update, user_data):
    bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
    show_general_buttons(bot, update, user_data)


dispatcher.add_handler(MessageHandler(Filters.text, text_message, pass_user_data = True))

#-------------------

loadData()
parse_travel_jobs()
#sys.stdout.flush()
threading.Thread(target=saveData).start()
#–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–¥

updating_to_database = Process(target = players_update, args = (players_need_update,), name = "Database_cloud_updating")
updating_to_database.start()

auction_checking = Process(target = auction_checker, args = (), name = "Auction checking")
auction_checking.start()


matchmaking = Process(target = matchmaking, args=(), name="Matchmaking")
matchmaking.start()

status_monitor_thread = threading.Thread(target = status_monitor, args = [])
status_monitor_thread.start()

#reconnect_database()


updater.start_polling(clean=False)

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã Ctrl + C
updater.idle()
# –†–∞–∑—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
work_materials.globals.processing = 0
conn.close()
players_need_update.put(None)
statuses.put(None)
try:
    updating_to_database.join()
except:
    pass

try:
    auction_checking.join()
except:
    pass
